import React, { useState, useEffect } from "react";
import styled from "styled-components";
import { DollarSign, Save, X, Tag, Clock } from "lucide-react";
import { toast } from "react-toastify";
// NOTE: Assuming bootstrap is available or styling is handled by styled-components

// ðŸŽ¨ Color constants (Updated for a 'cool' violet theme)
const Colors = {
Â  primaryColor: "#6B46C1", // Deep Violet for a premium, cool look
Â  secondaryColor: "#4C327A", // Darker Violet for hover states
Â  lightBackground: "#F9FBFC", // Softer light background
Â  darkGray: "#343A40",
Â  mediumGray: "#6C757D",
Â  textMuted: "#A0AEC0", // Softer gray for less focus text
Â  successGreen: "#28A745",
Â  dangerRed: "#DC3545",
Â  borderLight: "#E3E8EC",
Â  highlightColor: "#EDE9FE", // Very light violet for softer backgrounds
};

// ===============================
// Styled Components
// ===============================
// Kept ModalOverlay functional but made the Content softer
export const ModalOverlay = styled.div`
Â  position: fixed;
Â  top: 0;
Â  left: 0;
Â  width: 100%;
Â  height: 100%;
Â  background: rgba(0, 0, 0, 0.65); // Slightly darker overlay
Â  display: flex;
Â  align-items: center;
Â  justify-content: center;
Â  z-index: 1050;
Â  backdrop-filter: blur(5px); // Enhanced blur
`;

export const ModalContent = styled.div`
Â  background: #fff;
Â  border-radius: 12px; // More rounded
Â  padding: 2rem; // Increased padding
Â  width: 100%;
Â  max-width: 750px; /* Widened the modal */
Â  /* Â  Â  THE FIX: Set max-height to a value less than 100vh. 
Â  Â  90vh (Viewport Height) ensures the modal never exceeds the screen height, 
Â  Â  which is necessary to trigger the internal scrollbar when content is large.
Â  */
Â  max-height: 90vh; /* Corrected max height to allow scrolling */
Â  overflow-y: auto; /* Enable vertical scrolling */
Â  box-shadow: 0 15px 40px rgba(107, 70, 193, 0.2), 0 0 0 1px ${Colors.borderLight}; // Shadow based on primary color
Â  position: relative;
Â  transition: transform 0.3s ease-out;
`;

export const ModalHeader = styled.div`
Â  display: flex;
Â  justify-content: space-between;
Â  align-items: center;
Â  padding-bottom: 0.5rem;
Â  margin-bottom: 1.5rem; // Increased margin
`;

export const ModalTitle = styled.h4` // Changed to h4 for better visual weight
Â  font-weight: 700;
Â  color: ${Colors.primaryColor}; /* Title color matches the new theme */
Â  display: flex;
Â  align-items: center;
Â  gap: 0.5rem;
Â  margin: 0;
`;

export const CloseButton = styled.button`
Â  border: none;
Â  background: transparent;
Â  color: ${Colors.textMuted};
Â  padding: 0;
Â  cursor: pointer;
Â  transition: color 0.2s ease-in-out;
Â  &:hover {
Â  Â  color: ${Colors.dangerRed};
Â  }
`;

export const FormGroup = styled.div`
Â  margin-bottom: 1.25rem; // Slightly more vertical space
`;

export const Label = styled.label`
Â  font-weight: 600; // Bolder label
Â  margin-bottom: 0.4rem;
Â  display: block;
Â  color: ${Colors.darkGray};
Â  font-size: 0.95rem;
`;

export const Input = styled.input`
Â  width: 100%;
Â  padding: 0.8rem 1rem; // Increased padding for touch/click targets
Â  border: 1px solid ${Colors.borderLight};
Â  border-radius: 8px; // More rounded input
Â  font-size: 1rem;
Â  transition: border-color 0.2s, box-shadow 0.2s;
Â  background-color: white;
Â  
Â  &:focus {
Â  Â  outline: none;
Â  Â  border-color: ${Colors.primaryColor}; /* Focus ring color update */
Â  Â  box-shadow: 0 0 0 3px ${Colors.highlightColor}; // Soft focus ring
Â  }
`;

export const Select = styled(Input).attrs({ as: 'select' })`
Â  appearance: none; // Remove default select arrow
Â  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 24 24' fill='none' stroke='%236C757D' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
Â  background-repeat: no-repeat;
Â  background-position: right 1rem center;
Â  padding-right: 2.5rem; // Space for the custom arrow
`;


export const SubmitButton = styled.button`
Â  width: 100%;
Â  padding: 0.8rem;
Â  /* Added a subtle gradient for a premium look */
Â  background: linear-gradient(145deg, ${Colors.primaryColor}, ${Colors.secondaryColor}); 
Â  border: none;
Â  border-radius: 8px;
Â  color: #fff;
Â  font-weight: 600;
Â  font-size: 1rem;
Â  letter-spacing: 0.02em;
Â  display: flex;
Â  justify-content: center;
Â  align-items: center;
Â  gap: 0.5rem;
Â  transition: all 0.3s ease;
Â  box-shadow: 0 4px 15px rgba(107, 70, 193, 0.4); /* Shadow based on primary color */
Â  margin-top: 1.5rem;
Â  
Â  &:hover {
Â  Â  background: ${Colors.secondaryColor}; /* Solid darker color on hover */
Â  Â  box-shadow: 0 6px 20px rgba(107, 70, 193, 0.6);
Â  Â  transform: translateY(-1px);
Â  }
Â  &:disabled {
Â  Â  background: ${Colors.mediumGray};
Â  Â  box-shadow: none;
Â  Â  cursor: not-allowed;
Â  Â  transform: none;
Â  }
`;

// New style for the summary box
export const SummaryBox = styled.div`
Â  background-color: ${Colors.highlightColor}; /* Light violet background */
Â  border: 1px solid rgba(107, 70, 193, 0.1);
Â  padding: 1rem 1.5rem;
Â  border-radius: 8px;
Â  margin: 1.5rem 0 1rem 0;
`;

export const SummaryItem = styled.p`
Â  display: flex;
Â  align-items: center;
Â  margin: 0.4rem 0;
Â  color: ${Colors.darkGray};
Â  font-size: 0.95rem;
Â  font-weight: ${({ bold }) => (bold ? 600 : 400)};

Â  svg {
Â  Â  margin-right: 0.5rem;
Â  Â  color: ${Colors.primaryColor}; /* Icons match the new theme */
Â  }
`;

// ===============================
// MAIN COMPONENT
// ===============================
const ChargeSettingsModal = ({ isOpen, onClose, deceasedData, onUpdate }) => {
Â  const [chargeSettings, setChargeSettings] = useState({
Â  Â  chargeType: "daily",
Â  Â  rateProfile: "Standard", // New field for client differentiation
Â  Â  currency: "KES",
Â  Â  dailyRate: 800,
Â  Â  hourlyRate: 100,
Â  Â  usdRate: 130,
Â  });

Â  const [loading, setLoading] = useState(false);

Â  // Initialize state when modal opens or deceasedData changes
Â  useEffect(() => {
Â  Â  if (isOpen && deceasedData) {
Â  Â  Â  setChargeSettings({
Â  Â  Â  Â  chargeType: deceasedData.chargeType || "daily",
Â  Â  Â  Â  rateProfile: deceasedData.rateProfile || "Standard", // Load existing profile
Â  Â  Â  Â  currency: deceasedData.currency || "KES",
Â  Â  Â  Â  // Ensure rates are numbers, defaulting if undefined
Â  Â  Â  Â  dailyRate: Number(deceasedData.dailyRate) || 800,
Â  Â  Â  Â  hourlyRate: Number(deceasedData.hourlyRate) || 100,
Â  Â  Â  Â  usdRate: Number(deceasedData.usdRate) || 130,
Â  Â  Â  });
Â  Â  }
Â  }, [isOpen, deceasedData]);

Â  const handleInputChange = (e) => {
Â  Â  const { name, value } = e.target;
Â  Â  
Â  Â  // Convert numeric inputs to numbers
Â  Â  const finalValue = (name === 'dailyRate' || name === 'hourlyRate' || name === 'usdRate') 
Â  Â  Â  ? Number(value) 
Â  Â  Â  : value;

Â  Â  setChargeSettings((prev) => ({
Â  Â  Â  ...prev,
Â  Â  Â  [name]: finalValue,
Â  Â  }));
Â  };

Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setLoading(true);

Â  Â  if (!deceasedData || !deceasedData.id) {
Â  Â  Â  toast.error("Deceased data or ID is missing. Cannot save settings.");
Â  Â  Â  setLoading(false);
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  // Data validation before sending
Â  Â  Â  if (chargeSettings.chargeType === "daily" && (!chargeSettings.dailyRate || chargeSettings.dailyRate <= 0)) {
Â  Â  Â  Â  throw new Error("Daily Rate must be a positive number.");
Â  Â  Â  }
Â  Â  Â  if (chargeSettings.chargeType === "hourly" && (!chargeSettings.hourlyRate || chargeSettings.hourlyRate <= 0)) {
Â  Â  Â  Â  throw new Error("Hourly Rate must be a positive number.");
Â  Â  Â  }
Â  Â  Â  if (chargeSettings.currency === "USD" && (!chargeSettings.usdRate || chargeSettings.usdRate <= 0)) {
Â  Â  Â  Â  throw new Error("USD Exchange Rate must be a positive number.");
Â  Â  Â  }

Â  Â  Â  // NOTE: Using a mock fetch URL. Replace with actual API endpoint in a real application.
Â  Â  Â  const response = await fetch(
Â  Â  Â  Â  `http://localhost:5000/api/v1/restpoint/update-charge-settings/${deceasedData.id}`,
Â  Â  Â  Â  {
Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  Â  Â  // Send all settings including the new rateProfile
Â  Â  Â  Â  Â  body: JSON.stringify(chargeSettings),
Â  Â  Â  Â  }
Â  Â  Â  );

Â  Â  Â  const result = await response.json();

Â  Â  Â  if (response.ok) {
Â  Â  Â  Â  toast.success("Charge settings updated successfully");
Â  Â  Â  Â  onClose();
Â  Â  Â  Â  if (onUpdate) onUpdate(); // Trigger parent component refresh
Â  Â  Â  } else {
Â  Â  Â  Â  throw new Error(result.message || "Failed to update charge settings");
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  // NOTE: toast.error is assumed to be defined by a parent component
Â  Â  Â  console.error(error);
Â  Â  Â  toast.error(error.message);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  if (!isOpen) return null;
Â  
Â  const formatter = new Intl.NumberFormat('en-US', {
Â  Â  style: 'currency',
Â  Â  currency: chargeSettings.currency,
Â  Â  minimumFractionDigits: 0,
Â  Â  maximumFractionDigits: 2,
Â  });

Â  const displayRate = chargeSettings.chargeType === "daily" 
Â  Â  ? chargeSettings.dailyRate 
Â  Â  : chargeSettings.hourlyRate;
Â  
Â  const formattedRate = formatter.format(displayRate);


Â  return (
Â  Â  <ModalOverlay onClick={onClose}>
Â  Â  Â  <ModalContent onClick={(e) => e.stopPropagation()}>
Â  Â  Â  Â  <ModalHeader>
Â  Â  Â  Â  Â  <ModalTitle>
Â  Â  Â  Â  Â  Â  <DollarSign size={24} /> Billing Configuration
Â  Â  Â  Â  Â  </ModalTitle>
Â  Â  Â  Â  Â  <CloseButton onClick={onClose}>
Â  Â  Â  Â  Â  Â  <X size={22} />
Â  Â  Â  Â  Â  </CloseButton>
Â  Â  Â  Â  </ModalHeader>
Â  Â  Â  Â  
Â  Â  Â  Â  <p style={{ color: Colors.mediumGray, margin: "0 0 1.5rem 0", fontSize: "0.95rem" }}>
Â  Â  Â  Â  Â  Set custom rate profile and billing details for **{deceasedData?.full_name || 'this client'}**.
Â  Â  Â  Â  </p>

Â  Â  Â  Â  <form onSubmit={handleSubmit}>
Â  Â  Â  Â  Â  {/* Rate Profile and Currency Group - Responsive Grid */}
Â  Â  Â  Â  Â  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(180px, 1fr))', gap: '1rem' }}>
Â  Â  Â  Â  Â  Â  Â <FormGroup>
Â  Â  Â  Â  Â  Â  Â  Â  <Label>Rate Profile</Label>
Â  Â  Â  Â  Â  Â  Â  Â  <Select
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="rateProfile"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={chargeSettings.rateProfile}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Standard">Standard Rate</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Premium">Premium Client</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Discount">Discounted/Special</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Government">Government/NGO</option>
Â  Â  Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  Â  Â  </FormGroup>

Â  Â  Â  Â  Â  Â  Â  <FormGroup>
Â  Â  Â  Â  Â  Â  Â  Â  <Label>Currency</Label>
Â  Â  Â  Â  Â  Â  Â  Â  <Select
Â  Â  Â  Â  Â  Â  Â  Â  Â  name="currency"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={chargeSettings.currency}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="KES">KES (Kenyan Shilling)</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="USD">USD (US Dollar)</option>
Â  Â  Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  Â  Â  </FormGroup>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  <FormGroup>
Â  Â  Â  Â  Â  Â  <Label>Charge Frequency</Label>
Â  Â  Â  Â  Â  Â  <Select
Â  Â  Â  Â  Â  Â  Â  name="chargeType"
Â  Â  Â  Â  Â  Â  Â  value={chargeSettings.chargeType}
Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <option value="daily">Daily Rate</option>
Â  Â  Â  Â  Â  Â  Â  <option value="hourly">Hourly Rate</option>
Â  Â  Â  Â  Â  Â  </Select>
Â  Â  Â  Â  Â  </FormGroup>

Â  Â  Â  Â  Â  {/* Conditional Rate Inputs */}
Â  Â  Â  Â  Â  {chargeSettings.chargeType === "daily" && (
Â  Â  Â  Â  Â  Â  <FormGroup>
Â  Â  Â  Â  Â  Â  Â  <Label>Daily Rate ({chargeSettings.currency})</Label>
Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  name="dailyRate"
Â  Â  Â  Â  Â  Â  Â  Â  value={chargeSettings.dailyRate}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder={`e.g. 800 ${chargeSettings.currency}`}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </FormGroup>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {chargeSettings.chargeType === "hourly" && (
Â  Â  Â  Â  Â  Â  <FormGroup>
Â  Â  Â  Â  Â  Â  Â  <Label>Hourly Rate ({chargeSettings.currency})</Label>
Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  name="hourlyRate"
Â  Â  Â  Â  Â  Â  Â  Â  value={chargeSettings.hourlyRate}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder={`e.g. 100 ${chargeSettings.currency}`}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </FormGroup>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {chargeSettings.currency === "USD" && (
Â  Â  Â  Â  Â  Â  <FormGroup>
Â  Â  Â  Â  Â  Â  Â  <Label>USD to KES Exchange Rate</Label>
Â  Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  name="usdRate"
Â  Â  Â  Â  Â  Â  Â  Â  value={chargeSettings.usdRate}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g. 130"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </FormGroup>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {/* Summary */}
Â  Â  Â  Â  Â  <SummaryBox>
Â  Â  Â  Â  Â  Â  <h5 style={{ margin: "0 0 0.8rem 0", color: Colors.secondaryColor, fontWeight: 800, fontSize: '1.1rem' }}>
Â  Â  Â  Â  Â  Â  Â  Current Billing Summary
Â  Â  Â  Â  Â  Â  </h5>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <SummaryItem bold>
Â  Â  Â  Â  Â  Â  Â  <Tag size={18} /> 
Â  Â  Â  Â  Â  Â  Â  Rate Profile: {chargeSettings.rateProfile}
Â  Â  Â  Â  Â  Â  </SummaryItem>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <SummaryItem bold>
Â  Â  Â  Â  Â  Â  Â  <DollarSign size={18} /> 
Â  Â  Â  Â  Â  Â  Â  Current Rate: {formattedRate} / {chargeSettings.chargeType === 'daily' ? 'Day' : 'Hour'}
Â  Â  Â  Â  Â  Â  </SummaryItem>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {chargeSettings.currency === "USD" && (
Â  Â  Â  Â  Â  Â  Â  <SummaryItem style={{ color: Colors.mediumGray, fontSize: '0.85rem', marginTop: '0.8rem' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <Clock size={16} /> 
Â  Â  Â  Â  Â  Â  Â  Â  Exchange: 1 USD = {chargeSettings.usdRate} KES
Â  Â  Â  Â  Â  Â  Â  </SummaryItem>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </SummaryBox>

Â  Â  Â  Â  Â  <SubmitButton type="submit" disabled={loading}>
Â  Â  Â  Â  Â  Â  {loading ? "Saving Changes..." : "Save Configuration"}
Â  Â  Â  Â  Â  Â  {!loading && <Save size={18} />}
Â  Â  Â  Â  Â  </SubmitButton>
Â  Â  Â  Â  </form>
Â  Â  Â  </ModalContent>
Â  Â  </ModalOverlay>
Â  );
};

export default ChargeSettingsModal;